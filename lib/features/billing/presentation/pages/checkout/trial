import 'dart:io';

import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';
import 'package:mobile_pos/core/common/data/models/models.dart';
import 'package:mobile_pos/core/common/presentation/widget/loading_indicator.dart';
import 'package:mobile_pos/core/common/reducers/list_reducer.dart';
import 'package:mobile_pos/core/constants.dart';
import 'package:mobile_pos/database/app_database.dart';
import 'package:mobile_pos/database/product_stock/product_with_stock.dart';
import 'package:mobile_pos/features/billing/domain/entities/billing_item_entity.dart';

import 'package:mobile_pos/features/billing/presentation/widgets/billing/billing_total.dart';
import 'package:uuid/uuid.dart';

import '../../../../di/injection.dart';
import '../bloc/blocs.dart';

class CheckoutScreen extends StatefulWidget {
  const CheckoutScreen({
    Key? key,
  }) : super(key: key);

  @override
  _CheckoutScreenState createState() => _CheckoutScreenState();
}

class _CheckoutScreenState extends State<CheckoutScreen> {
  List<String> selectedItem = [];

  int? _selectedPaymentMethodIndex = 0;

  final TextEditingController _customerNameController = TextEditingController();
  final TextEditingController _customerEmailController =
      TextEditingController();
  final TextEditingController _customerPhoneController =
      TextEditingController();
  final TextEditingController _customerPaymentMethod = TextEditingController();
  final _formKey = GlobalKey<FormState>();

  late String payment;
  var color = Colors.grey[600];

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (context) =>
          getIt<BillingItemsBloc>()..add(GetBillingItemsEvent()),
      child: BlocBuilder<BillingItemsBloc, BillingItemsState>(
          builder: (context, state) {
        if (state is BillingItemsError) {
          return const Center(
            child: Text('Failed to load.'),
          );
        }
        if (state is BillingItemsLoaded) {
          final result =
              getTotals(state.billingItems, state.billingItemsEntity);
          return Scaffold(
              resizeToAvoidBottomInset: false,
              appBar: AppBar(
                title: const Text(
                  'Checkout',
                ),
                centerTitle: true,
                elevation: 0,
              ),
              body: _buildCheckoutScreen(
                  result, state.billingItems, state.billingItemsEntity),
              bottomSheet: const BillingTotal(
                isCheckout: true,
              ));
        }
        return const LoadingIndicator();
      }),
    );
  }

  Widget _buildCheckoutScreen(
      Map<String, double> result,
      List<ProductWithStock> productWithStock,
      List<BillingItemEntity> billingItems) {
    final List<StockModel> stockModel = productWithStock
        .asMap()
        .entries
        .map((e) => StockModel(
              id: e.value.stock.id,
              autoNumber_: e.value.stock.autoNumber,
              transactionDate_: e.value.stock.transactionDate,
              batchQuantity_: e.value.stock.batchQauntity,
              transactionQuantity_: e.value.stock.transactionQauntity,
              cumulativeQuantity_: e.value.stock.cumulativeQauntity,
              createdAt_: e.value.stock.createdAt,
              updatedAt_: DateTime.now(),
              masterRate_: e.value.stock.masterRate,
              itemcode: e.value.stock.itemcode,
              itemname: e.value.stock.itemname,
              description: e.value.stock.description,
              batchnumber: e.value.stock.batchnumber,
              rate_: e.value.stock.rate,
              availableQuantity: e.value.stock.availableQuantity -
                  billingItems[e.key].quantity,
              totalprice_: e.value.stock.totalprice,
              closing_: e.value.stock.closing,
              locationCode: e.value.stock.locationCode,
              storecode: e.value.stock.storecode,
            ))
        .toList();
    {
      String emailValid =
          r"^[a-zA-Z0-9.a-zA-Z0-9.!#$%&'*+-/=?^_`{|}~]+@[a-zA-Z0-9]+\.[a-zA-Z]+";
      final c = getTotals(productWithStock, billingItems);

      return SingleChildScrollView(
        padding: const EdgeInsets.all(8.0),
        child: Form(
          key: _formKey,
          child: Column(children: [
            Padding(
              padding: const EdgeInsets.only(bottom: 8.0),
              child: Text(
                'Customer Details',
                style: TextStyle(
                  fontSize: 18.0,
                  fontWeight: FontWeight.bold,
                  color: Theme.of(context).primaryColor,
                ),
              ),
            ),
            Padding(
              padding: const EdgeInsets.only(bottom: 8.0),
              child: Column(children: [
                TextFormField(
                  controller: _customerNameController,
                  decoration: const InputDecoration(
                    border: OutlineInputBorder(),
                    label: Text('Customer Name'),
                  ),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter customer';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 12.0),
                TextFormField(
                  controller: _customerEmailController,
                  keyboardType: TextInputType.streetAddress,
                  decoration: const InputDecoration(
                    border: OutlineInputBorder(),
                    label: Text('Customer Email'),
                  ),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter customer';
                    } else if (!value.contains(emailValid) ||
                        !_customerEmailController.text.contains(emailValid)) {
                      return 'Please Enter Valid User';
                    }
                    return null;
                  },
                  onFieldSubmitted: (value) {},
                ),
                const SizedBox(height: 12.0),
                TextFormField(
                  controller: _customerPhoneController,
                  keyboardType: TextInputType.phone,
                  decoration: const InputDecoration(
                    border: OutlineInputBorder(),
                    label: Text('Phone'),
                  ),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please Enter Phone Number';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 12.0),
                // TextFormField(
                //   controller: _customerPaymentMethod,
                //   decoration: const InputDecoration(
                //     border: OutlineInputBorder(),
                //     label: Text('Payment'),
                //   ),
                // ),
                const Divider(),
                const SizedBox(height: 16.0),
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Padding(
                      padding: const EdgeInsets.only(bottom: 8.0),
                      child: Wrap(
                        children: [
                          Text(
                            'Payment Method',
                            style: TextStyle(
                              fontSize: 18.0,
                              fontWeight: FontWeight.bold,
                              color: Theme.of(context).primaryColor,
                            ),
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                            children: [
                              Container(
                                height: 100.0,
                                width: 100.0,
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(20.0),
                                ),
                                child: TextButton(
                                  style: TextButton.styleFrom(
                                      backgroundColor: color),
                                  onPressed: () async {
                                    var dio = Dio();
                                    Response response;
                                    Response response2;

                                    response = await dio.get(
                                        BASE_URL + '/api/m/pay/get-stk',
                                        options: Options(
                                          headers: {
                                            HttpHeaders.contentTypeHeader:
                                                'application/json',
                                            HttpHeaders.authorizationHeader:
                                                'Token 50ecf5eb5902ae3d3b79afc7c23fcece821cc92c',
                                            'phone':
                                                _customerPhoneController.text,
                                            'name':
                                                _customerNameController.text,
                                            'amount': c['total']
                                          },
                                        ));
                                    print(response);

                                    response2 = await dio.get(
                                        BASE_URL + '/api/m/pay/callback',
                                        options: Options(
                                          headers: {
                                            HttpHeaders.contentTypeHeader:
                                                'application/json',
                                            HttpHeaders.authorizationHeader:
                                                'Token 50ecf5eb5902ae3d3b79afc7c23fcece821cc92c',
                                          },
                                        ));
                                    print(response2);
                                    dio.interceptors.add(InterceptorsWrapper(
                                        onResponse: (response2, handler) {
                                      if (response2.data == 'error') {
                                        AlertDialog(
                                          title: Text('Error'),
                                          content: Text(
                                              'Insufficient Funds in Mpesa Holders Account'),
                                        );
                                      }
                                    }));
                                  },
                                  child: Text('M-Pesa',
                                      style: Theme.of(context)
                                          .textTheme
                                          .bodyText2),
                                ),
                              ),
                              Container(
                                height: 100.0,
                                width: 100.0,
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(20.0),
                                ),
                                child: TextButton(
                                  style: TextButton.styleFrom(
                                    backgroundColor: color,
                                    elevation: 10,
                                  ),
                                  onPressed: () {
                                    payment = 'Cheque';
                                    setState(() {
                                      color = Colors.brown[400];
                                    });
                                  },
                                  child: Text('Cheque',
                                      style: Theme.of(context)
                                          .textTheme
                                          .bodyText2),
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                    const SizedBox(height: 12.0),
                    SizedBox(
                      width: MediaQuery.of(context).size.width,
                      child: ElevatedButton(
                        onPressed: () {
                          //Process Payment first then deduct from stock

                          final transactionId = const Uuid().v1();
                          final customerId = const Uuid().v1();
                          final invoiceid = const Uuid().v1();

                          final c = getTotals(productWithStock, billingItems);

                          final invoices = billingItems
                              .map((e) => InvoiceDataClass(
                                  id: 0,
                                  invoicenumber: invoiceid,
                                  total: c['total']!,
                                  tax: c['tax']!,
                                  subtotal: c['subtotal']!,
                                  customerId: e.customerId,
                                  productId: e.stockItemId,
                                  quantity: e.quantity,
                                  price: e.unitPrice,
                                  invoiceId: invoiceid,
                                  productCode: e.stockItemCode,
                                  createdAt: DateTime.now(),
                                  locationCode: e.locationCode,
                                  storecode: e.storecode,
                                  availQty: e.availableQuantity,
                                  taxPct: c['taxPct']!))
                              .toList();
                          String customer = '';
                          for (int i = 0; i < billingItems.length; i++) {
                            var customerN = billingItems[i].customerId;
                            customer = customerN;
                          }
                          final transactionClass = TransactionDataClass(
                              id: 0,
                              transactionId: transactionId,
                              total: c['total']!,
                              tax: c['tax']!,
                              subtotal: c['subtotal']!,
                              customerId: customer,
                              invoiceId: invoiceid,
                              customerEmail: _customerEmailController.text,
                              customerName: _customerNameController.text,
                              customerPhone:
                                  int.parse(_customerPhoneController.text),
                              paymentMethod: payment,
                              payComp: false,
                              createdAt: DateTime.now());

                          print(invoices);
                          getIt<BillingItemsBloc>().add(
                              CheckoutBillingItemsEvent(
                                  transaction: transactionClass,
                                  invoices: invoices));

                          getIt<StockItemBloc>()
                              .add(UpdateStockItemEvent(stock: stockModel));

                          getIt<BillingItemsBloc>()
                              .add(RemoveBillingItemsEvent());
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(content: Text('Processing Data')),
                          );

                          if (_formKey.currentState!.validate()) {
                            ScaffoldMessenger.of(context).showSnackBar(
                              const SnackBar(content: Text('Processing Data')),
                            );
                          } else {
                            Text('Error');
                          }

                          Navigator.pushNamedAndRemoveUntil(
                              context, '/dashboard', (route) => false);
                        },
                        child: const Text(
                          'Process Pay',
                          style: TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        style: ElevatedButton.styleFrom(
                          shape: const StadiumBorder(),
                          padding: const EdgeInsets.symmetric(
                              horizontal: 32.0, vertical: 16.0),
                          minimumSize: const Size(48.0, 8.0),
                        ),
                      ),
                    ),
                  ],
                ),
              ]),
            ),
          ]),
        ),
      );
    }
  }
}
